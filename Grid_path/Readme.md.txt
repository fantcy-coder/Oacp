README

This C++ code aims to solve a dynamic programming problem involving counting paths in a grid. The algorithm employed iterates through each cell of the grid, building up a dynamic programming table (dp) where each cell (dp[i][j]) represents the number of ways to reach the bottom-right cell (n x n) starting from the current cell (i, j). The algorithm initializes the base case (dp[n][n] = 1) and then iterates backwards through the grid, updating each cell based on the number of paths from adjacent cells (dp[i+1][j] and dp[i][j+1]). If the current cell is obstructed (grid[i][j] = 1), the number of paths through it is set to zero. Finally, if the starting cell (1, 1) or the destination cell (n, n) is obstructed, the code outputs 0; otherwise, it outputs the number of paths stored in dp[1][1]. This code employs modular arithmetic to prevent overflow by taking the result modulo 10^9 + 7.