cmps: This variable keeps track of the maximum product of a subarray that ends at the current index. For each element in the input array, we update the value of cmps based on the maximum product that can be obtained by considering the current element and the maximum and minimum product of the subarray that ends at the previous index.
cmi: This variable keeps track of the minimum product of a subarray that ends at the current index. As with cmps, we update the value of cmi at each index based on the minimum product that can be obtained by considering the current element and the maximum and minimum product of the subarray that ends at the previous index.
mp: This variable keeps track of the maximum product obtained so far. At each index, we compare the value of cmps with the current value of maxProductAns and update maxProductAns if cmps is greater than the current value of maxProductAns. By doing so, we ensure that mp always stores the maximum product obtained from any subarray in nums up to the current index.
The maximum product of a subarray can be obtained by considering three possibilities:
                //The current element nums[i] alone forms a subarray with the maximum product. In this case, the maximum product of the subarray that ends at the current index is simply nums[i].
                //The current element nums[i] is positive and can be added to the existing subarray that ends at the previous index with the maximum product. In this case, the maximum product of the subarray that ends at the current index is the product of the current element nums[i] and the maximum product of the subarray that ends at the previous index, i.e., cmps * nums[i].
                //The current element nums[i] is negative and can be added to the existing subarray that ends at the previous index with the minimum product. In this case, the maximum product of the subarray that ends at the current index is the product of the current element nums[i] and the minimum product of the subarray that ends at the previous index, i.e., cmi * nums[i].
//The minimum product of a subarray can be obtained by considering three possibilities:
                //The current element nums[i] alone forms a subarray with the minimum product. In this case, the minimum product of the subarray that ends at the current index is simply nums[i].
                //The current element nums[i] is positive and can be added to the existing subarray that ends at the previous index with the minimum product. In this case, the minimum product of the subarray that ends at the current index is the product of the current element nums[i] and the minimum product of the subarray that ends at the previous index, i.e., currMinProductSubarr * nums[i].
                //The current element nums[i] is negative and can be added to the existing subarray that ends at the previous index with the maximum product. In this case, the minimum product of the subarray that ends at the current index is the product of the current element nums[i] and the maximum product of the subarray that ends at the previous index, i.e., temp * nums[i].